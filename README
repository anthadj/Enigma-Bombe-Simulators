# N2MolproPECs 
n

# Description 
Using three pre-existing techniques along with a fourth one, we generate the potential energy curves (PECs) of nitrogen molecule ions with up to four electrons missing. The code produces the inputs files necessary to generate the PECs using the quantum chemistry package Molpro. The code can also be adjusted to produce PECs for nitrogen molecules with more electrons missing, as well as generate the PECs for different molecules.

# Dependencies 
- Python3.9        (Needed to run code)
- MOLPRO2020.1	     (Needed to run the input files once created)

Once the above dependencies have been installed proceed to the execution

# How to execute 
Download whole "src" directory. Then follow steps below.
- python main.py   (Code step 1, run from "src" directory: Creates file structure + initial inputs)
- molpro < N2_\*.in > ../outputs/N2_\*.out   (Run all input files from "inputs" directory. Output results into outputs folder)
- python main.py   (Code step 2, run from "src" directory: Checks all inputs ran successfully. Cleans outputs directory. Analyses SA-CASSCF and SA-TS-CASSCF. Produce new specific SA-CASSCF and SA-TS-CASSCF input files that produce wavefunctions)
- molpro < N2_\*\_IC.in > ../outputs/N2_\*\_IC.out   (Run all new SA-TS-CASSCF input files from "inputs" directory)
- molpro < N2_\*\_\*\_\*\_\*\_I.in > ../outputs/N2_\*\_\*\_\*\_\*\_I.out   (Run all new SA-CASSCF input files from "inputs" directory)
- python main.py   (Code step 3, run from "src" directory: Check all inputs from above two lines ran successfully. Clean outputs directory)

# Help and Collaborations 
For any help or collaborations please email:
antonis.hadjipittas@gmail.com

# License 
Apache License 2.0


# Theory and history of the matchine:

The enigma machine is simple to compute. 

Look at picture EnigmaDiagram.jpeg in this folder.
There are 5 layers of letter change (1 plugboard + 3 rotor wheels) and one reflector. Essentially the the letter passes through the four layers of letter changes twice and once through the reflector as shown in the .jpeg.

Specifics:
Plugboard: 10 pairs of letters out of 13 possible. Direction doesn't matter (if a->b, b->a regardless directions)
Rotors: 26 pairs of letters. Each of the 26 letters mapped onto another. Letters can map on to themselves. 5 rotors, from which 3 were chosen and placed in random order.  Direction matters (if a->b the b->a only if travelling in the opposite direction, i.e. after going through reflector)
Reflector: 13 pairs of letters. Same letter pairs not allowed! Direction doesn't matter (if a->b, b->a)

Direction matters in the rotors:
The letter scrambling in the 3 rotors is the opposite in the opposite direction, i.e. if a->h, in the direction right to left, then h->a in the direction left to right, but h-/>a in the direction right to left.  

Rotors change after each letter input:
The rotors rotate after every letter input. So if a rotor rotated by 1 position, it would have the effect of a->h to become b->h. Once the first rotor did a full circle, the second rotor would rotate by 1 position, like the hands of a clock. The base of the rotors could also be rotated manually. So by having the same positions for the three rotors, instead of starting from a->h, it would become a->i (next letter in the series).

The enigma machine problem:
The problem with the enigma machine is that the it never returns the same letter as the one inputted. This mistake occurred because the reflector would never return the signal from the same letter it came from, i.e. as can be seen from the diagram H->D in the reflector. This is what allowed the allies to break the code. 


Other notes:
The rotors were also not always rotating by 1, but sometimes they would rotate by more than 1, or they would rotate after 20 rotations of one rotor instead of 26. This was a disadvantage in the enigma machine, and it is not coded in the code.



# Executing the code: 

In the directory 'EnigmaMachine' there is a a script called enigma.py and two text files. The text file 'inputText.txt' has the text that the script will read and encrypt. The encrypted text will be stored in the file 'encryptedText.txt'. 

To run the enigma script: python enigma.py

There are 3 important methods in the script: 
1. encryptWithDefaultValues: 	This encrypts text with the default values (plugboard, reflector and rotor connections, as well as rotor positions). It is enough to see what the code works. 
2. encryptWithUserInput: 		This produces new random connections (for plugboard, reflector and rotor) and allows the user to import his/her own rotor positions. It outputs new connections and rotor positions
3. encryptWithPreExistingValues:	This reads the outputed random connections and rotor positions from method 2 and encrypts the text using them. 

These 3 methods can be found in the main function, 2 of them need to be commented out

Note: If you copy the encrypted message from the 'encryptedText.txt' file and paste it in the inputText.txt' file (and making sure you have the same values) the machine will decrypt the message and return the original one



